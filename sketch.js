let estadoHistoria = 0; // Controla qual parte da hist√≥ria estamos (0-8 para hist√≥ria, 9+ para quiz)
let textosHistoria = []; // Array para armazenar os textos de cada parte
let imagensHistoria = []; // Array para armazenar os objetos de imagem carregados
let musicaFundo;          // Vari√°vel para armazenar o objeto de √°udio

// Texto da instru√ß√£o "Pressione ENTER"
const instrucaoEnter = "(Pressione ENTER)";
const instrucaoRecomecar = "(Pressione ENTER para recome√ßar)";

// --- Vari√°veis para o Quiz ---
let estadoQuiz = 0; // 0: Introdu√ß√£o do quiz, 1: Pergunta 1, 2: Pergunta 2, 3: Pergunta 3, 4: Resultado
let perguntasQuiz = []; // Armazena as perguntas
let alternativasQuiz = []; // Armazena as alternativas para cada pergunta
let respostasCorretasQuiz = []; // Armazena o √≠ndice da resposta correta para cada pergunta
let acertos = 0; // Contador de respostas corretas
let ultimaRespostaNumerica = -1; // Nova vari√°vel para guardar a √∫ltima alternativa num√©rica digitada

function preload() {
  // --- Carregamento das Imagens ---
  imagensHistoria.push(loadImage('img0.png')); 
  imagensHistoria.push(loadImage('img1.png')); 
  imagensHistoria.push(loadImage('img2.png')); 
  imagensHistoria.push(loadImage('img3.png')); 
  imagensHistoria.push(loadImage('img4.png')); 
  imagensHistoria.push(loadImage('img5.png')); 
  imagensHistoria.push(loadImage('img6.png')); 
  imagensHistoria.push(loadImage('img7.png')); 
  imagensHistoria.push(loadImage('img8.png')); 

  // --- Carregamento da M√∫sica ---
  musicaFundo = loadSound('musica_fundo.mp3'); 
}

function setup() {
  createCanvas(800, 600); 
  textSize(24); 
  textAlign(LEFT, TOP); 
  
  // Populando o array com os textos revisados da hist√≥ria
  textosHistoria.push("Bem-vindo √† hist√≥ria dos rios: Vamos entender um pouco mais sobre essa incr√≠vel conec√ß√£o entre campo e cidade!"); 
  textosHistoria.push("No alto das montanhas, longe da agita√ß√£o, pequenas gotas de chuva se juntam. Elas formam filetes que, pouco a pouco, d√£o vida a um riacho cristalino que desce suavemente.");
  textosHistoria.push("√Ä medida que o riacho serpenteia pelo campo, ele encontra a terra f√©rtil. Suas √°guas puras regam as planta√ß√µes, saciam a sede dos animais e sustentam a vida rural, em harmonia com a natureza.");
  textosHistoria.push("Mas a jornada do rio continua. Ele se torna mais largo e forte, e suas margens come√ßam a ver as primeiras constru√ß√µes. √â o rio se aproximando da cidade, um elo vital entre o campo e o ambiente urbano.");
  textosHistoria.push("Na cidade, o rio se torna parte do cotidiano. Ele pode ser uma fonte de lazer, transporte ou at√© mesmo de √°gua para as casas. No entanto, a vida urbana tamb√©m traz grandes desafios...");
  textosHistoria.push("O crescimento da cidade pode trazer polui√ß√£o. Lixo, esgoto e res√≠duos industriais, se n√£o forem tratados, transformam as √°guas cristalinas em um leito de problemas, afetando toda a sua bacia.");
  textosHistoria.push("Isso prejudica os animais, as plantas e at√© mesmo a n√≥s, que dependemos da √°gua limpa.");
  textosHistoria.push("Para que o rio continue seu ciclo de vida, limpo e abundante, precisamos da colabora√ß√£o de todos. No campo, com a agricultura consciente. Na cidade, com tratamento de esgoto e descarte correto de lixo.");
  textosHistoria.push("Nossas escolhas, no campo ou na cidade, afetam diretamente a sa√∫de dos rios. Proteger um √© cuidar do outro, garantindo a √°gua para as futuras gera√ß√µes.\n\nFim da hist√≥ria."); 

  // --- Populando as Perguntas, Alternativas e Respostas do Quiz ---
  perguntasQuiz.push("Vamos salvar os rios! Responda √†s perguntas para mostrar seu conhecimento:"); // Introdu√ß√£o ao quiz
  alternativasQuiz.push([]); // Sem alternativas para a introdu√ß√£o
  respostasCorretasQuiz.push(-1); // Sem resposta para a introdu√ß√£o

  perguntasQuiz.push("1. Qual √© a principal fonte de √°gua doce no planeta, usada por grande parte da popula√ß√£o para consumo e agricultura?");
  alternativasQuiz.push(["1. Oceanos", "2. Geleiras e calotas polares", "3. Rios e lagos", "4. Len√ß√≥is fre√°ticos"]);
  respostasCorretasQuiz.push(2); // √çndice 2 (ou seja, 3¬™ alternativa: Rios e lagos)

  perguntasQuiz.push("2. Qual destas a√ß√µes √© considerada a MAIOR causadora de polui√ß√£o nos rios das √°reas urbanas?");
  alternativasQuiz.push(["1. Chuveiros com longa dura√ß√£o", "2. Descarte incorreto de lixo e esgoto dom√©stico", "3. Lavar o carro na rua", "4. Uso excessivo de copos descart√°veis"]);
  respostasCorretasQuiz.push(1); // √çndice 1 (ou seja, 2¬™ alternativa: Descarte incorreto de lixo e esgoto dom√©stico)

  perguntasQuiz.push("3. Al√©m de fornecer √°gua, qual outro benef√≠cio importante os rios oferecem para a vida selvagem e o equil√≠brio ambiental?");
  alternativasQuiz.push(["1. Aumentam a umidade do ar apenas", "2. Servem como habitat para diversas esp√©cies", "3. Criam barreiras naturais para o tr√°fego", "4. S√£o apenas caminhos para o transporte de barcos"]);
  respostasCorretasQuiz.push(1); // √çndice 1 (ou seja, 2¬™ alternativa: Servem como habitat para diversas esp√©cies)

  // In√≠cio da Reprodu√ß√£o da M√∫sica
  if (musicaFundo.isLoaded()) {
    musicaFundo.loop(); 
    musicaFundo.setVolume(0.5); 
  } else {
    console.error("Erro ao carregar a m√∫sica de fundo."); 
  }
}

function draw() {
  // Desenha a imagem de fundo
  if (estadoHistoria < textosHistoria.length) { // Se estiver na hist√≥ria, usa a imagem correspondente
    if (imagensHistoria[estadoHistoria]) {
      image(imagensHistoria[estadoHistoria], 0, 0, width, height); 
    } else {
      background(135, 206, 235); 
    }
  } else { // Se j√° est√° no quiz, usa sempre a img0.png como fundo
    if (imagensHistoria[0]) { // img0.png
      image(imagensHistoria[0], 0, 0, width, height); 
    } else {
      background(135, 206, 235);
    }
  }
  
  // --- L√≥gica para desenhar a Hist√≥ria ou o Quiz ---
  if (estadoHistoria < textosHistoria.length) { // Se ainda estiver na hist√≥ria
    drawHistoria();
  } else { // Se j√° terminou a hist√≥ria, exibe o Quiz
    drawQuiz();
  }
}

// --- Fun√ß√µes separadas para desenhar Hist√≥ria e Quiz ---

function drawHistoria() {
  let textMarginX = width * 0.1;  
  let textMarginY = height * 0.1; 
  let textStartX = textMarginX; 
  let textStartY = textMarginY; 
  let textContentWidth = width - (2 * textMarginX); 

  let currentTextHeight = textHeightForWidth(textosHistoria[estadoHistoria], textContentWidth);
  
  noStroke(); 
  fill(0, 0, 0, 150); 
  let backgroundPadding = 20; 
  rect(textStartX - backgroundPadding, 
       textStartY - backgroundPadding, 
       textContentWidth + (2 * backgroundPadding), 
       currentTextHeight + (2 * backgroundPadding)); 

  fill(255); 
  text(textosHistoria[estadoHistoria], textStartX, textStartY, textContentWidth); 

  // Desenha a instru√ß√£o "Pressione ENTER" na parte inferior
  drawInstrucaoEnter();
}

function drawQuiz() {
  let textMarginX = width * 0.1;  
  let textMarginY = height * 0.1; 
  let textStartX = textMarginX; 
  let textStartY = textMarginY; 
  let textContentWidth = width - (2 * textMarginX); 

  // --- Texto do Quiz ---
  let currentQuizText = perguntasQuiz[estadoQuiz];
  if (estadoQuiz > 0 && estadoQuiz <= 3) { // Se for uma pergunta, adiciona as alternativas
    currentQuizText += "\n\n";
    for(let i = 0; i < alternativasQuiz[estadoQuiz].length; i++) {
      currentQuizText += alternativasQuiz[estadoQuiz][i] + "\n";
    }
    currentQuizText += "\nSua escolha: " + (ultimaRespostaNumerica !== -1 ? ultimaRespostaNumerica : "_"); // Mostra a escolha do usu√°rio ou um cursor
    currentQuizText += "\n\nDigite o n√∫mero da alternativa e pressione ENTER.";
  } else if (estadoQuiz === 4) { // Tela de Resultado
    currentQuizText = acertos === 3 ? "Muito bem! Voc√™ acertou todas! üéâüåüüíß" : "Para continuar tentando... üò¢üå±‚ôªÔ∏è";
  }

  let currentTextHeight = textHeightForWidth(currentQuizText, textContentWidth);
  
  // Desenha o ret√¢ngulo de fundo para o texto do quiz
  noStroke(); 
  fill(0, 0, 0, 150); 
  let backgroundPadding = 20; 
  rect(textStartX - backgroundPadding, 
       textStartY - backgroundPadding, 
       textContentWidth + (2 * backgroundPadding), 
       currentTextHeight + (2 * backgroundPadding)); 

  // Desenha o texto do quiz
  fill(255); 
  text(currentQuizText, textStartX, textStartY, textContentWidth); 

  // Desenha a instru√ß√£o "Pressione ENTER" para o quiz
  drawInstrucaoEnter();
}

function drawInstrucaoEnter() {
  let instrucaoTextSize = 20; 
  textSize(instrucaoTextSize); 
  textAlign(CENTER, BOTTOM); 

  let instrucaoText;
  if (estadoHistoria < textosHistoria.length) { // Ainda na hist√≥ria
    instrucaoText = instrucaoEnter;
  } else { // J√° no quiz
    instrucaoText = (estadoQuiz === 4) ? instrucaoRecomecar : instrucaoEnter; 
  }

  let instrucaoPaddingX = width * 0.05; 
  let instrucaoPaddingY = height * 0.03;
  let instrucaoRectWidth = textWidth(instrucaoText) + (2 * instrucaoPaddingX);
  let instrucaoRectHeight = instrucaoTextSize * 1.5; 

  let instrucaoRectX = (width / 2) - (instrucaoRectWidth / 2); 
  let instrucaoRectY = height - instrucaoRectHeight - instrucaoPaddingY; 

  noStroke();
  fill(0, 0, 0, 150); 
  rect(instrucaoRectX, instrucaoRectY, instrucaoRectWidth, instrucaoRectHeight);

  fill(255); 
  text(instrucaoText, width / 2, height - instrucaoPaddingY); 

  // Volta o tamanho e alinhamento do texto para o principal
  textSize(24);
  textAlign(LEFT, TOP);
}


function keyPressed() {
  // Se estivermos na hist√≥ria e n√£o for a √∫ltima parte, avan√ßa com ENTER
  if (estadoHistoria < textosHistoria.length - 1 && keyCode === ENTER) {
    estadoHistoria++; 
  } 
  // Se terminou a hist√≥ria e √© ENTER, vai para o quiz
  else if (estadoHistoria === textosHistoria.length - 1 && keyCode === ENTER) {
    estadoHistoria++; // Mudar para o estado do quiz
    estadoQuiz = 0; // Reinicia o quiz
    acertos = 0; // Zera acertos
    ultimaRespostaNumerica = -1; // Limpa a √∫ltima resposta
  } 
  // Se j√° est√° no quiz
  else if (estadoHistoria >= textosHistoria.length) { 
    if (estadoQuiz === 0 && keyCode === ENTER) { // Na introdu√ß√£o do quiz, avan√ßa para a primeira pergunta
      estadoQuiz++;
      ultimaRespostaNumerica = -1; // Reseta para a pr√≥xima pergunta
    } else if (estadoQuiz > 0 && estadoQuiz < 4) { // Se for uma pergunta (1, 2 ou 3)
      // Captura a resposta num√©rica se uma tecla num√©rica foi pressionada
      if (key >= '1' && key <= '4') { // Verifica se a tecla √© um n√∫mero entre 1 e 4
        ultimaRespostaNumerica = int(key); // Armazena o n√∫mero digitado
      }
      
      // Se ENTER foi pressionado E uma resposta num√©rica v√°lida foi registrada
      if (keyCode === ENTER && ultimaRespostaNumerica !== -1) {
        // Verifica se a resposta est√° correta (lembrando que os √≠ndices do array s√£o 0-base)
        if (ultimaRespostaNumerica - 1 === respostasCorretasQuiz[estadoQuiz]) {
            acertos++;
        }
        estadoQuiz++; // Avan√ßa para a pr√≥xima pergunta ou para o resultado
        ultimaRespostaNumerica = -1; // Reseta para a pr√≥xima pergunta
      }
    } else if (estadoQuiz === 4 && keyCode === ENTER) { // Tela de resultado, recome√ßar
      estadoHistoria = 0; // Volta para o in√≠cio da hist√≥ria
      estadoQuiz = 0; // Reseta o quiz
      acertos = 0; // Zera acertos
      ultimaRespostaNumerica = -1; // Limpa a √∫ltima resposta
    }
  }
}

// Fun√ß√£o auxiliar para calcular a altura do texto com quebra de linha
function textHeightForWidth(str, w) {
  let h = 0;
  let words = str.split(' ');
  let currentLine = '';
  for (let i = 0; i < words.length; i++) {
    let word = words[i];
    let parts = word.split('\n');
    for (let j = 0; j < parts.length; j++) {
        let part = parts[j];
        if (j > 0) { 
            h += textAscent() + textDescent();
            currentLine = '';
        }
        let testLine = currentLine + part + ' ';
        if (textWidth(testLine) < w) {
            currentLine = testLine;
        } else {
            h += textAscent() + textDescent();
            currentLine = part + ' ';
        }
    }
  }
  if (currentLine.length > 0) { 
    h += textAscent() + textDescent();
  }
  return h;
}